# Exploratory Data Analysis Of IRIS Dataset

More Information About This Dataset: (https://en.wikipedia.org/wiki/Iris_flower_data_set)

Orignally Published at https://archive.ics.uci.edu/ml/datasets/Iris

This is iris dataset which contains length of various parameters of three types of flowers(setosa, versicolor, and virginia). The dataset contains 3 specieses, each has 50 instances, where each class is a type of IRIS flowers.

### Data Info:

1. Sepal length in cm
2. Sepal width in cm
3. Petal length in cm
4. Petal width in cm

### Objective:

##### We have to apply EDA on this dataset to find out which informations are useful to classify the diffences in flower.

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

iris = pd.read_csv("iris.csv")

iris.head()

# Column names in our dataset
iris.columns

# Informations about dataset
iris.info()

# No. of flowers in each species in our dataset
iris['species'].value_counts()

### Dataset Descriptions

#### Here, all the three classes have equal data points i.e 50 which clearly shows that it is a balanced dataset.

# Describing All Species
iris.describe()

# Describing Setosa Species
iris_setosa = iris.loc[iris["species"]=="setosa"]
iris_setosa.describe()

# Describing Versicolor Species
iris_versicolor = iris.loc[iris["species"]=="versicolor"]
iris_versicolor.describe()

# Describing Virginica Species
iris_virginica = iris.loc[iris["species"]=="virginica"]
iris_virginica.describe()

# 1-D Scatter Plot

##### In this plot we are just plotting point by taking x ccordinate or y ccordinate of a feature and making the other coordinate zero
##### 1-D scatter plot of sepal length

plt.plot(iris_setosa["sepal_length"], np.zeros_like(iris_setosa['sepal_length']), 'o')
plt.plot(iris_versicolor["sepal_length"], np.zeros_like(iris_versicolor['sepal_length']), 'o')
plt.plot(iris_virginica["sepal_length"], np.zeros_like(iris_virginica['sepal_length']), 'o')
plt.legend(['Setosa', 'Versicolor', 'Virginica'])
plt.xlabel('Sepal_Length')
plt.title('1D plot')

plt.show()

##### 1-D scatter plot of petal length

plt.plot(iris_setosa["petal_length"], np.zeros_like(iris_setosa['petal_length']), 'o')
plt.plot(iris_versicolor["petal_length"], np.zeros_like(iris_versicolor['petal_length']), 'o')
plt.plot(iris_virginica["petal_length"], np.zeros_like(iris_virginica['petal_length']), 'o')
plt.legend(['Setosa', 'Versicolor', 'Virginica'])
plt.xlabel('Petal_Length')
plt.title('1D plot')

plt.show()

## OBSERVATION
#### After performing 1-D scatter plot, it is clearly visible that the data points are overlapping and it is difficult to seperate the points

## 2-D Scatter Plot

iris.plot(x='sepal_length', y='sepal_width', kind='scatter')
plt.show()

iris.plot('petal_length', 'petal_width', kind='scatter')
plt.show()

#### Observation:

Here the problem is that, we are not able to differentiate three classes, hence this is not useful.

We have to set some different colors for different species to visualize easily.

sns.set_style("whitegrid")
sns.FacetGrid(iris, hue='species', height = 5).map(plt.scatter, 'sepal_length', 'sepal_width').add_legend()
plt.show()

#### Observation:

Now it's good to differentiate 3 species from eachother by colors in above plot.

After use of sepal_length and sepal_width, we can see that Setosa flower is completely differentiate from other flowers.



### Each Species's Separate 2D Scatter Plot According To Sepal Length & Sepal Width

iris_setosa.plot(x="sepal_length", y="sepal_width", kind="scatter", label='setosa', color='r')
iris_versicolor.plot(x="sepal_length",y="sepal_width",kind="scatter", label='versicolor', color='g')
iris_virginica.plot(x="sepal_length", y="sepal_width", kind="scatter", label='virginica', color='b')
plt.show()

# Pair Plot 

sns.set_style('whitegrid')
sns.pairplot(iris,hue='species',height=4)
plt.show()

### Observations:
     1. petal_length and petal_width are the most useful features to identify various flower types.
     2. While Setosa can be easily identified (linearly seperable), Virginica and Versicolor have some overlap 
        (almost linearly seperable).
     3. We can find "lines" and "if-else" conditions to build a simple model to classify the flower types.

# Histogram, PDF and CDF

sns.FacetGrid(iris, hue="species", size=5).map(sns.distplot, "sepal_length").add_legend();
plt.show();

sns.FacetGrid(iris, hue="species", size=5).map(sns.distplot, "petal_length").add_legend();
plt.show();

sns.FacetGrid(iris, hue="species", size=5).map(sns.distplot, "sepal_width").add_legend();
plt.show();

sns.FacetGrid(iris, hue="species", size=5).map(sns.distplot, "petal_width").add_legend();
plt.show();

# distplot of sepal_length
sns.distplot(a=iris['sepal_length'])
plt.show()

# distplot of sepal_width
sns.distplot(a=iris['sepal_width'])
plt.show()

# distplot of petal_length
sns.distplot(a=iris['petal_length'])
plt.show()

# distplot of petal_width
sns.distplot(a=iris['petal_width'])
plt.show()

## OBSERVATION
#### 1. By performing histogram plot, it is clear that sepal_length and sepal_width feature have many data points overlapping so it is difficult to build a model by taking these two feature.
#### 2. petal_length and petal_width is more useful while taking a plot.

## Now plotting CDF(cummulative distributive function) and PDF(Probability Density function) to visualize what percentage
## of dataset is under a limit

counts, bin_edges = np.histogram(iris_setosa['petal_length'], bins=10, density=True)

pdf = counts/(sum(counts))
print(pdf)
print(bin_edges)

cdf = np.cumsum(pdf)
plt.plot(bin_edges[1:],pdf)
plt.plot(bin_edges[1:],cdf)

plt.show()

counts, bin_edges = np.histogram(iris_virginica['petal_length'], bins=10, density=True)

pdf = counts/(sum(counts))
print(pdf)
print(bin_edges)

cdf = np.cumsum(pdf)
plt.plot(bin_edges[1:],pdf)
plt.plot(bin_edges[1:],cdf)

plt.show()

counts, bin_edges = np.histogram(iris_versicolor['petal_length'], bins=10, density=True)

pdf = counts/(sum(counts))
print(pdf)
print(bin_edges)

cdf = np.cumsum(pdf)
plt.plot(bin_edges[1:],pdf)
plt.plot(bin_edges[1:],cdf)

plt.show()

# Statistical Data

### Mean, Median, Quantile, Percentile & Std. Deviation

print("Means:")
print(np.mean(iris_setosa["petal_length"]))
#Mean with an outlier.
print(np.mean(np.append(iris_setosa["petal_length"],50)));
print(np.mean(iris_virginica["petal_length"]))
print(np.mean(iris_versicolor["petal_length"]))

print("\nStd-dev:");
print(np.std(iris_setosa["petal_length"]))
print(np.std(iris_virginica["petal_length"]))
print(np.std(iris_versicolor["petal_length"]))

#medians
print('\n!!! Medians !!!')
print(np.median(iris_setosa["petal_length"]))
#median with a outlier
print(np.median(np.append(iris_setosa["petal_length"],50)))
print(np.median(iris_virginica["petal_length"]))
print(np.median(iris_versicolor["petal_length"]))

#quantiles
print('\n !!! Quantiles !!!')
print(np.percentile((iris_setosa["petal_length"]),np.arange(0,100,25)))
print(np.percentile((iris_virginica["petal_length"]),np.arange(0,100,25)))      
print(np.percentile((iris_versicolor["petal_length"]),np.arange(0,100,25)))

#50's
print("\n!!! 50 percentile !!!")
print(np.percentile((iris_setosa["petal_length"]),50))
print(np.percentile((iris_virginica["petal_length"]),50))
print(np.percentile((iris_versicolor["petal_length"]),50))

#90's
print('\n!!! 90 percentile !!!')
print(np.percentile((iris_setosa["petal_length"]),90))
print(np.percentile((iris_virginica["petal_length"]),90))
print(np.percentile((iris_versicolor["petal_length"]),90))

#Mean absolute deviation
from statsmodels import robust
print ("\nMean Absolute Deviation")
print(robust.mad(iris_setosa["petal_length"]))
print(robust.mad(iris_virginica["petal_length"]))
print(robust.mad(iris_versicolor["petal_length"]))

# Correlation Heatmap

plt.figure(figsize=(10,10))
sns.heatmap(iris.corr(),annot=True)
plt.plot()

# Box Plot | Violin Plot | Joint Plot

#### Box-plot with whiskers: another method of visualizing the  1-D scatter plot more intuitivey.

plt.figure(figsize=(12,10))

plt.subplot(2,2,1)
sns.boxplot(x="species",y="sepal_length",data=iris)
plt.subplot(2,2,2)
sns.boxplot(x="species",y="sepal_width",data=iris)
plt.subplot(2,2,3)
sns.boxplot(x="species",y="petal_length",data=iris)
plt.subplot(2,2,4)
sns.boxplot(x="species",y="petal_width",data=iris)
plt.show()

# A violin plot combines the benefits of the previous two plots and simplifies them
# Denser regions of the data are fatter, and sparser ones thinner in a violin plot
plt.figure(figsize=(12,10))

plt.subplot(2,2,1)
sns.violinplot(x="species",y="sepal_length",data=iris)
plt.subplot(2,2,2)
sns.violinplot(x="species",y="sepal_width",data=iris)
plt.subplot(2,2,3)
sns.violinplot(x="species",y="petal_length",data=iris)
plt.subplot(2,2,4)
sns.violinplot(x="species",y="petal_width",data=iris)
plt.show()

#2D Density plot, contors-plot
sns.jointplot(x="petal_length", y="petal_width", data=iris_setosa, kind="kde");
plt.show();

# Thank You For Explore ...

