# **Exploratory Data Analysis in Python**

#### In this Jupyter notebook, I will be showing you how to perform Exploratory Data Analysis on web scraped data of NBA player stats.

## **Web scraping data using pandas**

The following block of code will retrieve the "2019-20 NBA Player Stats: Per Game" data from http://www.basketball-reference.com/.

import pandas as pd
import seaborn as sns 
import matplotlib.pyplot as plt
import numpy as np

# Retrieve HTML table data
url = 'https://www.basketball-reference.com/leagues/NBA_2020_per_game.html'
html = pd.read_html(url, header = 0)
df2020 = html[0]
df2020

# Data cleaning
raw = df2020.drop(df2020[df2020.Age == 'Age'].index)
raw

## **Acronyms**


Acronym | Description
---|---
Rk | Rank
Pos | Position
Age | Player's age on February 1 of the season
Tm | Team
G | Games
GS | Games Started
MP | Minutes Played Per Game
FG | Field Goals Per Game
FGA | Field Goal Attempts Per Game
FG% | Field Goal Percentage
3P | 3-Point Field Goals Per Game
3PA | 3-Point Field Goal Attempts Per Game
3P% | FG% on 3-Pt FGAs.
2P | 2-Point Field Goals Per Game
2PA | 2-Point Field Goal Attempts Per Game
2P% | FG% on 2-Pt FGAs.
eFG% | Effective Field Goal Percentage
| *(Note: This statistic adjusts for the fact that a 3-point field goal is worth one more point than a 2-point field goal.)*
FT | Free Throws Per Game
FTA | Free Throw Attempts Per Game
FT% | Free Throw Percentage
ORB | Offensive Rebounds Per Game
DRB | Defensive Rebounds Per Game
TRB | Total Rebounds Per Game
AST | Assists Per Game
STL | Steals Per Game
BLK | Blocks Per Game
TOV | Turnovers Per Game
PF | Personal Fouls Per Game
PTS | Points Per Game

## Data Cleaning

raw.shape

raw.head()

raw.columns

### Missing Value Checking

raw.isnull().sum()

#### We can notice that FG%, 3P%, 2P%, eFG% and FT% have null values

### Replace missing values with 0

df = raw.fillna(0)

df.isnull().sum()

df = df.drop(['Rk'], axis=1)
df

## Data types of each columns in the dataframe

df.dtypes

## Exploratory Data Analysis

df.to_csv('nba.csv', index=False)

df = pd.read_csv('nba.csv')

df

df.dtypes

### Specific Data Types

df.select_dtypes(include=['number'])

df.select_dtypes(include=['object'])

### Conditional Selections

#### Which player scored the most Points (PTS) Per Game? Here, we will return the entire row.

df[df.PTS == df.PTS.max()]

# Only showing PTS column of maximum PTS  

PlayerMaxPts = df[df.PTS == df.PTS.max()]
PlayerMaxPts.PTS

###### Further question, what team is the player from?

PlayerMaxPoints = df[df.PTS == df.PTS.max()]
PlayerMaxPoints.Tm

###### Which position is the player playing as?

PlayerMaxPoints.Pos

###### How many games did the player played in the season?

PlayerMaxPoints.G

###### Which player scored more than 25 Points (PTS) Per Game?

df[df.PTS > 25]

###### Which player had the highest 3-Point Field Goals Per Game (3P) ?

df[df['3P'] == df['3P'].max()]

Max3P = df[df['3P'] == df['3P'].max()]
Max3P['3P']

###### Which player had the highest Assists Per Game (AST) ?

df[df['AST'] == df['AST'].max()]

MaxAst = df[df['AST'] == df['AST'].max()]
MaxAst['AST']

### GroupBy() function

###### Which player scored the highest (PTS) in the Memphis Grizzlies?

MEM = df.groupby('Tm').get_group('MEM')

MEM[MEM.PTS == MEM.PTS.max()]

###### Of the 5 positions, which position scores the most points?

We first group players by their positions.

df.groupby('Pos').PTS.describe()

We will now show only the 5 traditional positions (those having combo positions will be removed from the analysis).

positions = ['C','PF','SF','PG','SG']
POS = df[ df['Pos'].isin(positions)  ]
POS

POS.groupby('Pos').PTS.describe()

## Data Visualization

PTS = df[['Pos','PTS']]

positions = ['C','PF','SF','PG','SG']
PTS = PTS[PTS['Pos'].isin(positions)]

PTS

### Histplot / Histogram

#### Visualization Of PTS and Pos

sns.histplot(PTS, x='Pos')

sns.histplot(PTS, x='PTS', kde=True)

#### Individual histogram of selected Pos by PTS count

g = sns.FacetGrid(PTS, col="Pos")
g.map(sns.histplot, "PTS", kde=True);

##### Visualization Of Teams and Points: 
##### Tm(MEM, HOU & LAL)  VS.  PTS of (MEM, HOU & LAL)

PTS1 = df[['Tm','PTS']]

teams = ['HOU','MEM','LAL']
PTS1 = PTS1[PTS1['Tm'].isin(teams)]

PTS1

# All PTS made by MEM, LAL & HOU

sns.histplot(PTS1, x='PTS', kde=True)

#### Individual histogram of MEM, LAL & HOU by their PTS count

g1 = sns.FacetGrid(PTS1, col="Tm")
g1.map(sns.histplot, "PTS", kde=True);

### Counts of Players from A Particular Team

grps = df.groupby('Tm')
grps.PTS.describe()

## Average Points by All Teams in dataset

plt.subplots(figsize=(20, 10))

sns.barplot(x="Tm", y="PTS", data=df)
plt.xlabel("Teams", size=15)
plt.ylabel("Points", size=15)

### Box Plot

#### Point group by Position

sns.boxplot(x = 'Pos', y = 'PTS', data = PTS) 

sns.boxplot(x = 'Pos', y = 'PTS', data = PTS) 
sns.stripplot(x = 'Pos', y = 'PTS', data = PTS,
              jitter=True, 
              marker='o',
              alpha=0.7, 
              color="black")

## Heatmap

### Correlation matrix

corr = df.corr()
corr

sns.heatmap(corr)

plt.subplots(figsize=(20, 10))
sns.heatmap(corr, square=True)

## Scatter Plot

df

### Show df of numerical data only

number = df.select_dtypes(include=['number'])
number

number.iloc[:,1:6]

columns = ['Age','AST','STL','BLK','TOV','PTS']
new_df = df[columns]
new_df

sns.PairGrid(new_df).map(plt.scatter)

sns.PairGrid(number).map(plt.scatter)

# Thank You :)

